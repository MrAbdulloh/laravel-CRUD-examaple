<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;

class CRUDUserExampleTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutExceptionHandling();
    }

    /** @test */
    public function CreateUser()
    {
        $userData = [
            'name' => $this->faker->name(),
            'email' => $this->faker->email(),
            'password'=>$this->faker->password()
        ];
        $response = $this->post('users', $userData);
        $response->assertStatus(Response::HTTP_CREATED);
        $this->assertDatabaseHas('users', $userData);
    }
    /** @test */
    public function ReadUser()
    {
        $user = User::factory()->create();

        $response = $this->get('users/' . $user->id);

        $response->assertStatus(Response::HTTP_OK);

        $response->assertJsonFragment([
            'name' => $user->name,
            'email' => $user->email,
        ])->assertJsonMissing([
            'password'=>$user->password,
            'remember_token'=>$user->remember_token,
        ]);
    }
    /** @test */

    public function UpdateUser()
    {
        $user = User::factory()->create();
        $userData = [
            'name' => $this->faker->name(),
            'email' => $this->faker->email(),
            'password' => $this->faker->password()
        ];
        $response = $this->put('users/' . $user->id, $userData);
        $response->assertStatus(Response::HTTP_OK);
        $this->assertDatabaseHas('users', $userData);
    }

}
